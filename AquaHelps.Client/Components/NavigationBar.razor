@using AquaHelps.Client.Services

@inject AccountService Account

<div class="flex flex-col-reverse gap-2 sm:flex-col">

<div class="flex flex-row justify-around sm:justify-between gap-2  bg-white rounded-xl p-2  shadow-white drop-shadow-2xl">
    <div class="flex flex-row gap-2 sm:justify-start w-2/3 sm:w-auto">
        <Button ButtonText="Home" Page="/" IconName="house"></Button>
        <Button ButtonText="Docs" Page="/Documents" IconName="file-earmark-text"></Button>
    </div>
    <div class="flex flex-row flex-grow w-1/3 sm:w-auto sm:justify-end">
        <div class="hidden flex-none sm:flex">
            <Button ButtonText="" Page="/Search" IconName="search"></Button>
        </div>
        <div class="flex sm:hidden flex-grow">
            <Button ButtonText="Search" Page="/Search" IconName="search"></Button>
        </div>
    </div>
    @* @foreach(var page in Pages)
    {
        <Button ButtonText="@(page.Text)" Page="@(page.Page)" IconName="@(page.IconName)"></Button>
        <Button ButtonText="@(page.Text)" Page="@(page.Page)" IconName="@(page.IconName)"></Button>
        <Button ButtonText="@(page.Text)" Page="@(page.Page)" IconName="@(page.IconName)"></Button>
    } *@
   
</div>
 @if(!_isSignedIn)
{
    <div class="flex flex-row justify-between gap-2 sm:justify-start bg-white rounded-xl p-2 shadow-white drop-shadow-2xl">
        <Button ButtonText="Account" IconName="person"></Button>
        <Button ButtonText="Logout" IconName="box-arrow-right" ButtonType="Secondary"></Button>
    </div>
}
</div>

@code { 

    private IEnumerable<(string Text, string Page, string? IconName)> Pages = new[] {("Home", "/", "house"), ("Docs", "", "file-earmark-text"), ("Search", "/Search", "search")};

    private bool _isSignedIn = false;

        protected async override Task OnInitializedAsync()
        {
            _isSignedIn = await Account.IsSignedIn();

            await base.OnInitializedAsync();
        }
} 
